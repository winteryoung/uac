#!/usr/bin/env ruby

require 'uac'

def split_args
  i = ARGV.index '--'
  if i
    return [ ARGV[0...i], ARGV[(i+1)..-1] ]
  else
    return [ [], ARGV ]
  end
end

(meta_args, args) = split_args

all_options = args.all? do |arg|
  arg.start_with? "-"
end
if all_options
  meta_args = args
  args = []
end

options = {
  :pause => true,
  :terminal => true
}
option_parser = OptionParser.new do |opt|
  opt.banner = <<-EOF
Usage: uac <OPTIONS> <COMMAND>

Argument separator:

'--' is used to separate the options passed to uac and the commands
to be executed. Example is shown below. If an option for uac is
present (example '-p'), then '--' is required.

Example:

* View netstat and then pause after execution
  uac netstat -anb
  It's equivalent to
  uac cmd /c "netstat -anb & pause"

* Start a daemon process and then exit
  uac --no-terminal YourService.exe
EOF

  opt.separator ""
  opt.separator "Options:"

  terminal_help = 'The given command will be executed in a terminal window, so cmd /c is added implictly. This is enabled by default.'
  opt.on('-t', '--[no-]terminal', terminal_help) do |o|
    options[:terminal] = o
    if not o
      options[:pause] = o
    end
  end

  pause_help = 'Pause after execution. This implies executing command line, so cmd.exe is the program to be executed. This option implies --terminal. This is enabled by default.'
  opt.on('-p', '--[no-]pause', pause_help) do |o|
    options[:pause] = o
    options[:terminal] = o
  end

  opt.on('--debug') do |o|
    options[:debug] = o
  end

  opt.on_tail('-h', '--help', 'Print this help.') do |o|
    puts opt
    exit
  end
end.parse! meta_args

if options[:debug]
  puts "options: #{options}"
  puts "args: #{args}"
end

if not args or args.empty?
  exit
end

Uac.shell_execute options, args
